{"componentChunkName":"component---src-templates-blog-post-js","path":"/merge-channels/","webpackCompilationHash":"b9e71a99cf8a55c1dae5","result":{"data":{"site":{"siteMetadata":{"title":"mic(s)","author":"Michelle"}},"markdownRemark":{"id":"7ebb8d28-5d1b-5475-a96f-eae168de4746","excerpt":"I encountered a situation while writing an application for text extraction,\nwhere I fan-out to process files based on file extension types, but then needed aâ€¦","html":"<p>I encountered a situation while writing an application for text extraction,\nwhere I fan-out to process files based on file extension types, but then needed a\nway to fan-in the results to a single channel of responses for some consumer.</p>\n<p>After doing some open-source research (googling), I discovered go had a convenient way\nof merging channels, which in this case, was processed data channels produced by each file extension type (struct)\nthat implemented the file processor interface.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">mergeChannels</span><span class=\"token punctuation\">(</span>cs <span class=\"token operator\">...</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> ProcessorInterface<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> ProcessorInterface <span class=\"token punctuation\">{</span>\n\toutChan <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> ProcessorInterface<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> cs <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>channel <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> ProcessorInterface<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">for</span> val <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> channel <span class=\"token punctuation\">{</span>\n\t\t\t\toutChan <span class=\"token operator\">&lt;-</span> val\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>outChan<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> outChan\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Let's Merge Channels","date":"July 06, 2019","description":"I encountered a situation while writing an application for text extraction..."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/merge-channels/","previous":null,"next":{"fields":{"slug":"/concurrency-bloopers/"},"frontmatter":{"title":"Concurrency Bloopers"}}}}}